#!/usr/bin/env bash
###################################################
## Function library                              ##
##                                               ##
## Copyright 2020                                ##
## Sandor Semsey <semseysandor@gmail.com>        ##
## All rights reserved.                          ##
##                                               ##
## This work is published under the MIT License. ##
## https://choosealicense.com/licenses/mit/      ##
###################################################

##########
# CONFIG #
##########

# Exit on error
#set -e

# Exit pipe on non-zero return value
set -o pipefail

# Allow dot globbing
shopt -s dotglob

# Allow pipe to read
shopt -s lastpipe

###########
# GLOBALS #
###########

# TEXT FORMAT
_TXT_NORM="\e[0m"
_TXT_BOLD="\e[1m"
_TXT_BLUE="\e[34m"
_TXT_GREEN="\e[32m"
_TXT_RED="\e[31m"
_TXT_STAT="${_TXT_BLUE}${_TXT_BOLD}"
_TXT_ERR="${_TXT_RED}${_TXT_BOLD}"
_TXT_OK="${_TXT_GREEN}${_TXT_BOLD}"

###############
# ERROR CODES #
###############

# Not run as root
_E_ROOT=50
# Aborted
_E_ABORT=51

#############
# FUNCTIONS #
#############

# Exit with message and code
error() {
  local msg=${1}
  local code=${2:-1}

  # Print error & exit
  [[ -n ${msg} ]] && echo -e "${_TXT_ERR}${msg}${_TXT_NORM}" >&2
  exit "${code}"
}

# Ask for confirmation
confirm() {
  read -r -p "Are you sure? (y/n) "
  [[ ${REPLY} != 'y' && ${REPLY} != 'Y' ]] && error "Aborting." ${_E_ABORT}
  return 0
}

# Check if run as root
check_root() {
  [[ $(id -u) -ne 0 ]] && error "Run as root!" ${_E_ROOT}
  return 0
}

# Check if not run as root
check_not_root() {
  [[ $(id -u) -eq 0 ]] && error "Don't run as root!" ${_E_ROOT}
  return 0
}

# Echo status message
status() {
  local msg=${*}
  echo
  echo -e "${_TXT_STAT}${msg}${_TXT_NORM}"
}

# Echo OK message
finish() {
  local msg=${*:-"Done."}
  echo -e "${_TXT_OK}${msg}${_TXT_NORM}"
}

# Echo script running time
run_time() {
  local sec
  local min
  local hour

  sec=${SECONDS}
  hour=$((sec / 3600))
  sec=$((sec % 3600))
  min=$((sec / 60))
  sec=$((sec % 60))

  echo "Running time:"
  printf "%d hours %02d mins %02d secs\n" ${hour} ${min} ${sec}
}

# Join arguments by char
implode() {
  if [[ ${#} -lt 2 ]]; then
    echo "Arguments missing"
    return
  fi

  local IFS="${1}"
  shift
  echo "${*}"
}
