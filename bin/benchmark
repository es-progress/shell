#!/usr/bin/env bash
##########################################
## benchmark                            ##
##                                      ##
## A wrapper and runner for `sysbench`. ##
## You can design multiple test runs    ##
## with different test parameters,      ##
## so you can benchmark the system for: ##
##   - CPU                              ##
##   - Memory                           ##
##   - Disks                            ##
##   - Download speed                   ##
## in a single script.                  ##
##########################################

############
## CONFIG ##
############

# Version
version=1.2.4
# Individual benchmark time limit (seconds)
# Quick benchmark
test_run_time_quick=6
# Deep benchmark
test_run_time_deep=60

## CPU
######

# Run parameters in semicolon limited string
# Threads ; Max prime number
# Quick benchmark
runs_cpu_quick=("1;10000")
# Deep benchmark
runs_cpu_deep=()
runs_cpu_deep+=("1;30000")
runs_cpu_deep+=("16;30000")

# CPU test file size in MB
# Quick benchmark
cpu_test_file_size_quick=5
# Deep benchmark
cpu_test_file_size_deep=50

## Memory
#########

# Run parameters in semicolon limited string
# Threads ; Memory block size ; Memory total size ; Memory access mode
# Quick benchmark
runs_memory_quick=("1;1M;10G;seq")
# Deep benchmark
runs_memory_deep=()
runs_memory_deep+=("1;512;30G;rnd")
runs_memory_deep+=("16;4K;50G;rnd")
runs_memory_deep+=("1;1M;100G;rnd")
runs_memory_deep+=("1;1M;100G;seq")

## Disk
#######

# Run parameters in semicolon limited string
# Threads ; Number of files ; Block size ; Test mode ; fsync after every request ; Read/write ratio ; Total files size
# Quick benchmark
runs_disk_quick=("1;1;1M;seqrd;off;3;1G")
# Deep benchmark
runs_disk_deep=()
runs_disk_deep+=("1;64;4K;rndrw;on;3;4G")
runs_disk_deep+=("16;64;64K;rndrw;off;3;4G")
runs_disk_deep+=("1;1;1M;seqrd;off;3;4G")
runs_disk_deep+=("1;1;1M;seqwr;off;3;4G")

## Download Bandwidth
#####################

# Run parameters in semicolon limited string
# Name ; Location ; URL
# Quick benchmark
runs_download_quick=("CacheFly;Cloud;http://cachefly.cachefly.net/100mb.test")
# Deep benchmark
runs_download_deep=()
runs_download_deep+=("CacheFly;Cloud;http://cachefly.cachefly.net/100mb.test")
runs_download_deep+=("Fibernet;Hungary;http://fibernet-bwt.loom.hu/downfile/mega.down")
runs_download_deep+=("Vultr;London;https://lon-gb-ping.vultr.com/vultr.com.1000MB.bin")
runs_download_deep+=("Vultr;Frankfurt;https://fra-de-ping.vultr.com/vultr.com.1000MB.bin")
runs_download_deep+=("Vultr;Paris;https://par-fr-ping.vultr.com/vultr.com.1000MB.bin")
runs_download_deep+=("Vultr;Amsterdam;https://ams-nl-ping.vultr.com/vultr.com.1000MB.bin")
runs_download_deep+=("Otenet;Athens;http://speedtest.ftp.otenet.gr/files/test1Gb.db")
runs_download_deep+=("Vultr;New York;https://nj-us-ping.vultr.com/vultr.com.1000MB.bin")
runs_download_deep+=("Vultr;Dallas;https://tx-us-ping.vultr.com/vultr.com.1000MB.bin")
runs_download_deep+=("Vultr;Los Angeles;https://lax-ca-us-ping.vultr.com/vultr.com.1000MB.bin")
runs_download_deep+=("Vultr;Tokyo;https://hnd-jp-ping.vultr.com/vultr.com.1000MB.bin")
runs_download_deep+=("Vultr;Sydney;https://syd-au-ping.vultr.com/vultr.com.1000MB.bin")

###############
## FUNCTIONS ##
###############

## Version
##########
_version() {
    cat <<EOF
benchmark v${version}
Written by Sandor Semsey, Copyright (C) 2020, License MIT
EOF
}

## Usage
########
_usage() {
    cat <<EOF

Usage: benchmark [OPTIONS]...

OPTIONS:

  -c, --cpu
  -m, --memory
  -d, --disk
      --download
                         Run appropriate test. If no test specified, all will run.
                         Ignored if '-s' given.
  -s, --system           Run only a system check
  -r, --report           Save test report to file
      --report-prefix    Report file prefix, implies '-r'
  -q, --quick            Do a quick benchmark. Ignored if '-s' given.
      --deep             Deep benchmarking. Ignored if '-s' given.
  -p, --params           Config file to override test parameters

  -h, --help             Display this help
  -v, --version          Print version
EOF
}

## Clean up after tests
#######################
# shellcheck disable=SC2317
_clean-up() {
    find . -name "test_file.*" -delete
    exit
}

## Test CPU with real use cases
###############################
_cpu-app-test() {
    local time_sha time_bzip time_aes

    dd if=/dev/urandom of=test_file.cpu bs=1M count="${cpu_test_file_size}" >/dev/null 2>&1

    # shellcheck disable=SC2312
    time_sha=$({ TIME="%e seconds" time sha256sum >/dev/null <test_file.cpu; } 2>&1)
    # shellcheck disable=SC2312
    time_bzip=$({ TIME="%e seconds" time bzip2 >/dev/null <test_file.cpu; } 2>&1)
    # shellcheck disable=SC2312
    time_aes=$({ TIME="%e seconds" time openssl enc -e -aes-256-cbc -pass pass:12345678 -pbkdf2 >/dev/null <test_file.cpu; } 2>&1)

    printf "%-20s %s\n" SHA256-hashing: "${time_sha}"
    printf "%-20s %s\n" bzip2-compressing: "${time_bzip}"
    printf "%-20s %s\n" AES-encrypting: "${time_aes}"

    rm -f test_file.cpu
}

## Benchmark
##
## @param    $1  Type of benchmark
## @param    $@  Params for benchmark
#####################################
_run-benchmark() {
    local type="${1?:Benchmark type missing}"
    local params=("--time=${test_run_time}")

    # Compile params
    case "${type}" in
        cpu) params=("${params[@]}" "--threads=${2}" "--cpu-max-prime=${3}" cpu) ;;
        memory) params=("${params[@]}" "--threads=${2}" "--memory-block-size=${3}" "--memory-total-size=${4}" "--memory-access-mode=${5}" memory) ;;
        disk) params=("${params[@]}" "--threads=${2}" "--file-num=${3}" "--file-block-size=${4}" "--file-test-mode=${5}" "--file-fsync-all=${6}" "--file-rw-ratio=${7}" "--file-total-size=${8}" fileio) ;;
        download)
            curl --disable -4 --max-time 60 --no-progress-meter -o /dev/null -w "%{speed_download}\n" --url "${4}"
            return 0
            ;;
        *)
            echo Not supported type >&2
            return 1
            ;;
    esac

    # Run benchmark
    [[ "${type}" == disk ]] && sysbench "${params[@]}" prepare
    sysbench "${params[@]}" run
    [[ "${type}" == disk ]] && sysbench "${params[@]}" cleanup

    return 0
}

## Filter benchmark results for summary
##
## @param    $1  Name of benchmark
## @param    $2  Raw results
#######################################
_filter-results() {
    local type="${1?:Benchmark type missing}"
    local raw="${2?:Raw results missing}"
    local filter

    case "${type}" in
        cpu_app) filter='/^SHA256-hashing/ p; /^bzip2-compressing/ p; /^AES-encrypting/ p;' ;;
        cpu) filter=' /^CPU speed:/,+1 p; /^Latency/,+3 p' ;;
        memory) filter='/transferred/ p; /^Latency/,+3 p' ;;
        disk) filter='/^Throughput/,+2 p; /^Latency/,+3 p' ;;
        download)
            awk '{ printf "%d MBit/s\n", $0 * 8 / 1000 / 1000 } END { if (NR == 0) { print "error" } }' <<<"${raw}"
            return 0
            ;;
        *)
            echo Not supported type >&2
            return 1
            ;;
    esac

    sed -n "${filter}" <<<"${raw}"
}

## Print test header with system info
#####################################
_print-sysinfo() {
    cat <<EOF
--------------------------------------------------------
 Benchmark v${version}

 ${hostname}
--------------------------------------------------------

========================================================
                      SYSTEM INFO
========================================================

                          CPU
********************************************************
Vendor: ${cpu_vendor}
Model : ${cpu_model}
Cores :  ${cpu_cores}
MHz   : ${cpu_freq}
Cache : ${cpu_cache}

                        Memory
********************************************************
Total : ${ram_total}
Free  : ${ram_free}
Swap  : ${ram_swap}

                    Operating System
********************************************************
OS     : ${os}
Kernel : ${kernel}
Arch   : ${arch}

                         Disks
********************************************************
Device    Capacity    Type
--------------------------
${disks}

EOF
}

## Print summary header
#######################
_print-summary-header() {
    local date
    date=$(date +"%F %R")
    cat <<EOF
========================================================
                      TEST RESULTS

 ${hostname}
 ${date}

 Total run time: $((SECONDS / 60)) min $((SECONDS % 60)) sec
========================================================
EOF
}

## Print summary
##
## @param    $1  Name of benchmark
##################################
_print-summary() {
    local testname="${1}"
    local run_param params

    # Header
    printf "\n%30s\n********************************************************\n" "${testname^^}"

    # Parallel runs
    i=0
    for run_param in ${all_test_param[${type}]}; do
        selector="${type}_${i}"
        IFS=";" read -r -a params <<<"${run_param}"

        # Run header
        printf "\nRun #%d\n------\n\n" $((i + 1))

        # Print run parameters
        case "${testname}" in
            cpu)
                printf "%-17s : %32d\n" "Number of threads" "${params[0]}"
                printf "%-17s : %32d\n\n" "Max prime number" "${params[1]}"
                ;;
            memory)
                printf "%-17s : %8d\n" "Number of threads" "${params[0]}"
                printf "%-17s : %8s\n" "Memory block size" "${params[1]}"
                printf "%-17s : %8s\n" "Memory total size" "${params[2]}"
                printf "%-17s : %8s\n\n" "Memory access mode" "${params[3]}"
                ;;
            disk)
                printf "%-17s : %8s\n" "Number of threads" "${params[0]}"
                printf "%-17s : %8s\n" "Number of files" "${params[1]}"
                printf "%-17s : %8s\n" "File block size" "${params[2]}"
                printf "%-17s : %8s\n" "Test mode" "${params[3]}"
                printf "%-17s : %8s\n" "fsync on all" "${params[4]}"
                printf "%-17s : %8s\n" "Read/write ratio" "${params[5]}"
                printf "%-17s : %8s\n\n" "Total file size" "${params[6]}"
                ;;
            download)
                printf "%-15s [%-10s]  : " "${params[1]}" "${params[0]}"
                ;;
            *)
                echo Not supported testname: "${testname}" >&2
                exit 1
                ;;
        esac

        # Run results
        echo "${summary[${selector}]}"
        i=$((i + 1))
    done

    # Print CPU application test results
    if [[ "${testname}" == cpu ]]; then
        printf "\nApplication test\n----------------\n\n%s\n" "${summary[cpu_app]}"
    fi
}

##################
## SCRIPT START ##
##################

# Strict mode + inherit
set -eufo pipefail
shopt -s inherit_errexit
IFS=$'\n\t'

tests=()
declare -A all_test_param
declare -A summary

# Parse options
create_report=
report_file_prefix=
sys_check=
benchmark_depth=
params_file=
while :; do
    case "${1:-}" in
        -r | --report) create_report=1 ;;
        --report-prefix)
            shift
            report_file_prefix="${1}"
            create_report=1
            ;;
        -c | --cpu) tests+=(cpu) ;;
        -m | --memory) tests+=(memory) ;;
        -d | --disk) tests+=(disk) ;;
        --download) tests+=(download) ;;
        -s | --system) sys_check=1 ;;
        -q | --quick) benchmark_depth=quick ;;
        --deep) benchmark_depth=deep ;;
        -p | --params)
            shift
            params_file="${1}"
            ;;
        -h | --help)
            _version
            _usage
            exit 0
            ;;
        -v | --version)
            _version
            exit 0
            ;;
        "") break ;;
        *)
            echo Not supported option: "${1}" >&2
            _usage
            exit 1
            ;;
    esac
    shift
done

if [[ -z "${sys_check}" && -z "${benchmark_depth}" ]]; then
    echo "Benchmark depth missing (quick or full)" >&2
    exit 1
fi

# Read params file & select tests
if [[ -n "${params_file}" && -r "${params_file}" ]]; then
    # shellcheck disable=SC1090
    source "${params_file}"
fi
case "${benchmark_depth}" in
    quick)
        test_run_time="${test_run_time_quick}"
        all_test_param[cpu]="${runs_cpu_quick[*]}"
        cpu_test_file_size="${cpu_test_file_size_quick}"
        all_test_param[memory]="${runs_memory_quick[*]}"
        all_test_param[disk]="${runs_disk_quick[*]}"
        all_test_param[download]="${runs_download_quick[*]}"
        ;;
    deep)
        test_run_time="${test_run_time_deep}"
        all_test_param[cpu]="${runs_cpu_deep[*]}"
        cpu_test_file_size="${cpu_test_file_size_deep}"
        all_test_param[memory]="${runs_memory_deep[*]}"
        all_test_param[disk]="${runs_disk_deep[*]}"
        all_test_param[download]="${runs_download_deep[*]}"
        ;;
    *)
        if [[ -z "${sys_check}" ]]; then
            echo Not supported depth: "${benchmark_depth}" >&2
            _usage
            exit 1
        fi
        ;;
esac

# If no test specified --> run all
[[ -z "${tests[*]}" ]] && tests=(cpu memory disk download)

# Check for required commands
if [[ -z "${sys_check}" ]]; then
    required_commands=(dd sha256sum bzip2 openssl lsblk sysbench curl)
    for cmd in "${required_commands[@]}"; do
        if ! command -v "${cmd}" >/dev/null 2>&1; then
            echo Missing dependency: "${cmd}" >&2
            exit 1
        fi
    done
fi

## Get System info
##################
# CPU info
cpu_info=$(cat /proc/cpuinfo)
cpu_model=$(grep -m 1 "model name" <<<"${cpu_info}" | cut -d ":" -f 2)
cpu_vendor=$(grep -m 1 vendor_id <<<"${cpu_info}" | cut -d ":" -f 2)
cpu_freq=$(grep -m 1 "cpu MHz" <<<"${cpu_info}" | cut -d ":" -f 2)
cpu_cache=$(grep -m 1 "cache size" <<<"${cpu_info}" | cut -d ":" -f 2)
cpu_cores=$(awk -F: '/model name/ {core++} END {print core}' <<<"${cpu_info}")

# RAM info
ram_info=$(free -h)
ram_total=$(grep "Mem:" <<<"${ram_info}" | awk '{print $2}')
ram_free=$(grep "Mem:" <<<"${ram_info}" | awk '{print $4}')
ram_swap=$(grep "Swap:" <<<"${ram_info}" | awk '{print $2}')

# OS info
host=$(hostnamectl)
hostname=$(hostname)
os=$(grep -m 1 Operating <<<"${host}" | cut -d ":" -f 2)
kernel=$(grep -m 1 Kernel <<<"${host}" | cut -d ":" -f 2)
arch=$(grep -m 1 Architecture <<<"${host}" | cut -d ":" -f 2)

# Disks
disks=$(lsblk --nodeps --noheadings --output NAME,SIZE,ROTA --exclude 1,2,7,11 | sort | awk '{if ($3 == 0) {$3="SSD"} else {$3="HDD"}; printf("%-10s%-12s%-3s\n", $1, $2, $3)}')

# If we need to save report to file --> set filename
# else: discard report (only output to terminal)
if [[ -n "${create_report}" ]]; then
    output_file="${report_file_prefix}${hostname}_$(date +%F_%H_%M)"
else
    output_file=/dev/null
fi

# Sysinfo
_print-sysinfo | tee "${output_file}"
[[ -n "${sys_check}" ]] && exit 0

# Make sure test files are always deleted, even when the script is interrupted
trap _clean-up EXIT INT TERM

# Run Benchmarks
echo Start Benchmarking...
for type in "${tests[@]}"; do
    if [[ "${type}" == cpu ]]; then
        echo Running CPU application test...
        results=$(_cpu-app-test)
        summary[cpu_app]=$(_filter-results cpu_app "${results}")
    fi

    # Parallel runs
    i=0
    for run_param in ${all_test_param[${type}]}; do
        selector="${type}_${i}"
        IFS=";" read -r -a params <<<"${run_param}"

        echo Running "${type^^}" benchmark "#$((i + 1))..."
        results=$(_run-benchmark "${type}" "${params[@]}")
        summary[${selector}]=$(_filter-results "${type}" "${results}")

        i=$((i + 1))
    done
done

echo Benchmarking finished.
echo

## Summary
##########
_print-summary-header | tee -a "${output_file}"

for type in "${tests[@]}"; do
    _print-summary "${type}" | tee -a "${output_file}"
done

exit 0
