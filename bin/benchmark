#!/usr/bin/env bash
##########################################
## ES-Ubuntu                            ##
##                                      ##
## benchmark                            ##
##                                      ##
## A wrapper and runner for `sysbench`. ##
## You can desing multiple test runs    ##
## with different test parameters,      ##
## so you can benchmark the system for: ##
##   - CPU                              ##
##   - Memory                           ##
##   - Disks                            ##
##   - Download speed                   ##
## in a single script.                  ##
##########################################

########################
# BENCHMARK PARAMETERS #
########################

# Individual benchmark time limit (seconds)
test_run_time=60

# CPU
#####

# Run parameters in semicolon limited string
# Threads ; Max prime number
runs_cpu[0]="1;30000"
runs_cpu[1]="16;30000"

# CPU test file size in MB
cpu_test_file_size=50

# Memory
########

# Run parameters in semicolon limited string
# Threads ; Memory block size ; Memory total size ; Memory access mode
runs_memory[0]="1;512;30G;rnd"
runs_memory[1]="16;4K;50G;rnd"
runs_memory[2]="1;1M;100G;rnd"
runs_memory[3]="1;1M;100G;seq"

# Disk
######

# Run parameters in semicolon limited string
# Threads ; Number of files ; Block size ; Test mode ; fsync after every request ; Read/write ratio ; Total files size
runs_disk[0]="1;64;4K;rndrw;on;3;4G"
runs_disk[1]="16;64;64K;rndrw;off;3;4G"
runs_disk[2]="1;1;1M;seqrd;off;3;4G"
runs_disk[3]="1;1;1M;seqwr;off;3;4G"

# Download Bandwidth
####################

# Run parameters in semicolon limited string
# Name ; Location ; URL
runs_download[0]="CacheFly;Cloud;http://cachefly.cachefly.net/100mb.test"
runs_download[1]="Fibernet;Hungary;http://fibernet-bwt.loom.hu/downfile/mega.down"
runs_download[2]="Vultr;London;https://lon-gb-ping.vultr.com/vultr.com.1000MB.bin"
runs_download[3]="Vultr;Frankfurt;https://fra-de-ping.vultr.com/vultr.com.1000MB.bin"
runs_download[4]="Vultr;Paris;https://par-fr-ping.vultr.com/vultr.com.1000MB.bin"
runs_download[5]="Vultr;Amsterdam;https://ams-nl-ping.vultr.com/vultr.com.1000MB.bin"
runs_download[6]="Otenet;Athens;http://speedtest.ftp.otenet.gr/files/test1Gb.db"
runs_download[7]="Vultr;New York;https://nj-us-ping.vultr.com/vultr.com.1000MB.bin"
runs_download[8]="Vultr;Dallas;https://tx-us-ping.vultr.com/vultr.com.1000MB.bin"
runs_download[9]="Vultr;Los Angeles;https://lax-ca-us-ping.vultr.com/vultr.com.1000MB.bin"
runs_download[10]="Vultr;Tokyo;https://hnd-jp-ping.vultr.com/vultr.com.1000MB.bin"
runs_download[11]="Vultr;Sydney;https://syd-au-ping.vultr.com/vultr.com.1000MB.bin"

#############
# FUNCTIONS #
#############

# Usage
#######
usage() {
    cat <<EOF

Benchmark v1.0.0
Written by Sandor Semsey, Copyright(C) 2020, License MIT

Usage: benchmark [OPTIONS]...

OPTIONS:

-c, --cpu
-m, --memory
-d, --disk
    --down
                       Run appropriate test. If no test specified, all will run.
-v, --verbose          Verbose mode
-r, --report           Save test report to file
    --report-prefix    Report file prefix, implies '-r'

-h, --help             Display this help

EOF
    exit 0
}

# Check if command exists
#########################
command_exists() {
    command -v "$@" >/dev/null 2>&1
}

# Clean up after tests
######################
clean_up() {
    rm -f test_file.*
    exit
}

# Test CPU with real use cases
##############################
cpu_app_test() {

    local create_test_file time_sha time_bzip time_aes

    [[ -n "${verbose_mode}" ]] && echo "Test file size: ${cpu_test_file_size} MB"

    # Create test file
    [[ -n "${verbose_mode}" ]] && echo "Creating test file..."
    create_test_file=$(dd if=/dev/urandom of="test_file.cpu" bs=1M count="${cpu_test_file_size}" 2>&1)

    if [[ -n "${verbose_mode}" ]]; then
        echo "${create_test_file}"
        echo "Test file created."
    fi

    # Run tests
    # Hashing
    time_sha=$({ TIME='%e seconds' time sha256sum >/dev/null <"test_file.cpu"; } 2>&1)
    # bzip compressing
    time_bzip=$({ TIME='%e seconds' time bzip2 >/dev/null <"test_file.cpu"; } 2>&1)
    # AES encrypting
    time_aes=$({ TIME='%e seconds' time openssl enc -e -aes-256-cbc -pass pass:12345678 -pbkdf2 >/dev/null <"test_file.cpu"; } 2>&1)

    # Print results
    echo "SHA256-hashing:    ${time_sha}"
    echo "bzip2-compressing: ${time_bzip}"
    echo "AES-encrypting:    ${time_aes}"

    # Delete test file
    [[ -n "${verbose_mode}" ]] && echo "Deleting test file..."
    rm -f "test_file.cpu"
    [[ -n "${verbose_mode}" ]] && echo "Test file deleted."
    echo
}

# Benchmark
###########
run_benchmark() {

    local params

    # Set parameters
    params="--time=${test_run_time}"

    case "${1}" in
        cpu)
            params="${params} --threads=${2} --cpu-max-prime=${3} cpu"
            ;;
        memory)
            params="${params} --threads=${2} --memory-block-size=${3} --memory-total-size=${4} --memory-access-mode=${5} memory"
            ;;
        disk)
            params="${params} --threads=${2} --file-num=${3} --file-block-size=${4} --file-test-mode=${5} --file-fsync-all=${6} \
                        --file-rw-ratio=${7} --file-total-size=${8} fileio"
            ;;
        download)
            curl -4 --max-time 10 -so /dev/null -w '%{speed_download}\n' --url "${4}"
            return
            ;;
    esac

    # Run benchmark
    [[ "${1}" == "disk" ]] && sysbench ${params} prepare
    sysbench ${params} run
    [[ "${1}" == "disk" ]] && sysbench ${params} cleanup
    echo
}

# Filter benchmark results for summary
######################################
filter_results() {

    local filter

    # Set filter
    case "${1}" in
        cpu_app)
            filter='/^SHA256-hashing/ p; /^bzip2-compressing/ p; /^AES-encrypting/ p;'
            ;;
        cpu)
            filter=' /^CPU speed:/,+1 p; /^Latency/,+3 p'
            ;;
        memory)
            filter='/transferred/ p; /^Latency/,+3 p'
            ;;
        disk)
            filter='/^Throughput/,+2 p; /^Latency/,+3 p'
            ;;
        download)
            awk '{ printf "%d MBit/s\n", $0 * 8 / 1000 / 1000 } END { if (NR == 0) { print "error" } }' <<<"${2}"
            return
            ;;
    esac

    # Apply filter
    sed -n "${filter}" <<<"${2}"
}

# Print test header with system info
####################################
print_sysinfo() {
    cat <<EOF
--------------------------------------------------
 Benchmark v0.8

 ${hostname}
--------------------------------------------------

==================================================
                    SYSTEM INFO
==================================================

*************************
           CPU
*************************

Vendor: ${cpu_vendor}
Model : ${cpu_model}
Cores : ${cpu_cores}
MHz   : ${cpu_freq}
Cache : ${cpu_cache}
TLB   : ${cpu_TLB}

*************************
          Memory
*************************

Total : ${ram_total}
Free  : ${ram_free}
Swap  : ${ram_swap}

*************************
     Operating System
*************************

OS     : ${os}
Kernel : ${kernel}
Arch   : ${arch}

*************************
          Disks
*************************

Device    Capacity    Type
--------------------------
${disks}

EOF
}

# Print summary header
######################
print_summary_header() {
    cat <<EOF
==================================================
                   TEST RESULTS

 ${hostname}
 $(date +"%F %R")

 Total run time: $((SECONDS / 60)) min $((SECONDS % 60)) sec
==================================================
EOF
}

# Print summary
###############
print_summary() {

    # Get run data
    run_data="runs_${1}[@]"

    # Init iterator
    i=0

    # Print test type header
    echo
    echo "*************************"
    echo "       ${1^^}"
    echo "*************************"

    # Loop through runs
    for run_param in "${!run_data}"; do

        # Set summary selector
        selector="${type}_${i}"

        # Convert semicolon limited string into array
        IFS=";" read -r -a params <<<"${run_param}"

        # Print run header
        echo
        echo "Run #$((i + 1))"
        echo "------"
        echo

        # Print run parameters
        case "${1}" in
            cpu)
                printf "%-20s : %8d\n" "Number of threads" "${params[0]}"
                printf "%-20s : %8d\n\n" "Max prime number" "${params[1]}"
                ;;
            memory)
                printf "%-20s : %8d\n" "Number of threads" "${params[0]}"
                printf "%-20s : %8s\n" "Memory block size" "${params[1]}"
                printf "%-20s : %8s\n" "Memory total size" "${params[2]}"
                printf "%-20s : %8s\n\n" "Memory access mode" "${params[3]}"
                ;;
            disk)
                printf "%-20s : %8s\n" "Number of threads" "${params[0]}"
                printf "%-20s : %8s\n" "Number of files" "${params[1]}"
                printf "%-20s : %8s\n" "File block size" "${params[2]}"
                printf "%-20s : %8s\n" "Test mode" "${params[3]}"
                printf "%-20s : %8s\n" "fsync on all" "${params[4]}"
                printf "%-20s : %8s\n" "Read/write ratio" "${params[5]}"
                printf "%-20s : %8s\n\n" "Total file size" "${params[6]}"
                ;;
            download)
                printf "%-15s [%-10s]  : " "${params[1]}" "${params[0]}"
                ;;
        esac

        # Print run results
        echo "${summary[${selector}]}"

        # Bump iterator
        i=$((i + 1))
    done

    # Print CPU application test results
    if [[ "${1}" == "cpu" ]]; then
        # Set selector
        selector="cpu_app"

        echo
        echo "Application test"
        echo "----------------"
        echo
        echo "${summary[${selector}]}"
    fi
}

################
# SCRIPT START #
################

# Strict mode minus IFS
set -euo pipefail

# Make sure test files are always deleted, even when the script is interrupted
trap clean_up EXIT INT TERM

# Init vars
###########

# Array for summary
declare -A summary

# Tests to perform
tests=()

# Parse options
###############

verbose_mode=""
create_report=""
report_file_prefix=""
while :; do
    case "${1:-}" in
        -v | --verbose)
            verbose_mode=1
            ;;
        -r | --report)
            create_report=1
            ;;
        --report-prefix)
            shift
            report_file_prefix="${1}"
            create_report=1
            ;;
        -c | --cpu)
            tests+=("cpu")
            ;;
        -m | --memory)
            tests+=("memory")
            ;;
        -d | --disk)
            tests+=("disk")
            ;;
        --down)
            tests+=("download")
            ;;
        -h | --help)
            usage
            ;;
        *)
            break
            ;;
    esac
    shift
done

# Validate options
##################

# If no test specified --> run all
[[ -z "${tests[*]}" ]] && tests=(cpu memory disk download)

# Check for required commands
#############################

required_commands=(dd sha256sum bzip2 openssl lsblk sysbench curl)

for cmd in "${required_commands[@]}"; do
    if ! command_exists "${cmd}"; then
        echo "Missing dependency: ${cmd}"
        exit 1
    fi
done

# Get System info
#################

# CPU info
cpu_info="$(cat /proc/cpuinfo)"
cpu_model=$(grep -m 1 "model name" <<<"${cpu_info}" | cut -d ":" -f 2)
cpu_vendor=$(grep -m 1 "vendor_id" <<<"${cpu_info}" | cut -d ":" -f 2)
cpu_freq=$(grep -m 1 "cpu MHz" <<<"${cpu_info}" | cut -d ":" -f 2)
cpu_cache=$(grep -m 1 "cache size" <<<"${cpu_info}" | cut -d ":" -f 2)
cpu_cores=$(awk -F: '/model name/ {core++} END {print core}' <<<"${cpu_info}")
cpu_TLB=$(grep -m 1 "TLB size" <<<"${cpu_info}" | cut -d ":" -f 2)

# RAM info
ram_info="$(free -h)"
ram_total=$(grep "Mem:" <<<"${ram_info}" | awk '{print $2}')
ram_free=$(grep "Mem:" <<<"${ram_info}" | awk '{print $4}')
ram_swap=$(grep "Swap:" <<<"${ram_info}" | awk '{print $2}')

# OS info
host=$(hostnamectl)
hostname=$(hostname)
os=$(grep -m 1 "Operating" <<<"${host}" | cut -d ":" -f 2)
kernel=$(grep -m 1 "Kernel" <<<"${host}" | cut -d ":" -f 2)
arch=$(grep -m 1 "Architecture" <<<"${host}" | cut -d ":" -f 2)

# Disks
disks=$(lsblk --nodeps --noheadings --output NAME,SIZE,ROTA --exclude 1,2,11 |
sort | sed '/^loop/ d' | awk '{if ($3 == 0) {$3="SSD"} else {$3="HDD"}; printf("%-10s%-12s%-3s\n", $1, $2, $3)}')

# Header
########
print_sysinfo

echo "Start Benchmarking..."

# Run Benchmarks
################

# Loop through tests
for type in "${tests[@]}"; do

    # Run CPU application test
    if [[ "${type}" == "cpu" ]]; then

        echo "Running CPU application test..."
        results=$(cpu_app_test)

        # Show detailed results
        [[ -n "${verbose_mode}" ]] && echo "${results}"

        # Filter results
        summary[cpu_app]="$(filter_results cpu_app "${results}")"
    fi

    # Init iterator
    i=0

    # Get run data
    run_data="runs_${type}[@]"

    # Loop through runs
    for run_param in "${!run_data}"; do

        # Convert semicolon limited string into array
        IFS=";" read -r -a params <<<"${run_param}"

        # Run benchmarks
        echo "Running ${type^^} benchmark #$((i + 1))..."
        results=$(run_benchmark "${type}" ${params[*]})

        # Show detailed results
        [[ -n "${verbose_mode}" ]] && echo "${results}"

        # Set summary data selector
        selector="${type}_${i}"

        # Filter results & save to summary
        summary[${selector}]=$(filter_results "${type}" "${results}")

        # Bump iterator
        i=$((i + 1))

    done
done

echo "Benchmarking finished."
echo

# Summary
#########

# If we need to save report to file --> set filename
# else: discard report (only output to terminal)
if [[ -n "${create_report}" ]]; then
    output_file="${report_file_prefix}${hostname}_$(date +"%F_%H_%M")"
else
    output_file=/dev/null
fi

# Print header
print_summary_header | tee "${output_file}"

# Loop through tests
for type in "${tests[@]}"; do
    # Print test summary
    print_summary "${type}" | tee -a "${output_file}"
done

exit 0
