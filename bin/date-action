#!/usr/bin/env bash
#############################################
## date-action                             ##
##                                         ##
## Check filenames for date (time) tags    ##
## and perform some action on a selection. ##
#############################################

############
## CONFIG ##
############

# Formats
regex_24H="[0-9]{2}:[0-9]{2}:[0-9]{2}"
regex_YMD="[0-9]{4}-[0-9]{2}-[0-9]{2}"
regex_FULL="[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{2}:[0-9]{2}:[0-9]{2}"
date_format_24H="%T"
date_format_YMD="%F"
date_format_FULL="%F_%T"

# Defaults
mode="list"
older=1
directory=0
regex="${regex_YMD}"
date_format="${date_format_YMD}"

###############
## FUNCTIONS ##
###############

## Usage
########
usage(){
    cat <<HELP

date-action v1.0.0
Written by Sandor Semsey, Copyright(C) 2020, License MIT

Usage: date-action [OPTIONS] [FILE...]

Executes an action on files older/newer than a reference based on filenames

Like abc2020_02_19xyz

OPTIONS

-r, --remove            remove files (default is "list")
-n, --newer             performs actions on files newer than reference (default is older)
-d, --directory         performs actions on directories too (delete contents recursively)

    --format=[FORMAT]   supported formats:
                        24H (HH:MM eg. 17:26:14)
                        YMD (YYYY-mm-dd eg. 2020-02-19)  <-- default
                        FULL (YYYY-mm-dd_HH:MM:SS)

    --diff=[STRING]     date difference from now to set reference
                        for acceptable STRINGs see: 'man date'

    --debug             print commands as executed
-h, --help              display this help

HELP
    exit 0
}

##################
## SCRIPT START ##
##################

# Strict mode minus IFS
set -euo pipefail

if ! options=$(getopt -n date-action -o "rndh" -l "remove,newer,directory,format:,diff:,debug,help" -- "$@"); then
    echo "Try 'date-action --help' for more information"
    exit 1
fi
eval set -- "${options}"

while :; do
    case "${1}" in
        -r | --remove)
            mode="delete"
            ;;
        -n | --newer)
            older=0
            ;;
        -d | --directory)
            directory=1
            ;;
        --format)
            shift
            case "${1}" in
                24H)
                    regex="${regex_24H}"
                    date_format="${date_format_24H}"
                    ;;
                FULL)
                    regex="${regex_FULL}"
                    date_format="${date_format_FULL}"
                    ;;
            esac
            ;;
        --diff)
            shift
            date_diff="-d ${1}"
            ;;
        --debug)
            set -x
            ;;
        -h | --help)
            usage
            ;;
        --)
            shift
            break
            ;;
    esac
    shift
done

# Get reference date
date_ref=$(date +${date_format} ${date_diff})

# Check if piped, get files from args or pipe
[[ -p /dev/stdin ]] && files=$(cat) || files=${*}

# Loop through files
for file in ${files}; do

    # Check if file has date in name
    if ! egrep -sq "${regex}" <<<"${file}"; then continue; fi

    # Parse date from filename
    file_date=$(sed -r "s/.*($regex).*/\1/" <<<"${file}")

    # Check if older or newer than reference
    [[ ${file_date} < ${date_ref} ]] && file_older=1 || file_older=0

    # If older (or newer depending on options) skip file
    [[ ${file_older} -eq ${older} ]] || continue

    # Listing mode
    if [[ ${mode} == "list" ]]; then
        echo "$file"
        continue
    fi

    # Delete mode
    if [[ ${mode} == "delete" ]]; then
        rm -rf "$file"
        continue
    fi
done

exit 0
