#!/usr/bin/env bash
#####################################
## pass-man                        ##
##                                 ##
## Manages a 'pass' password-store ##
## which is inside a tomb.         ##
#####################################

############
## CONFIG ##
############
# Timer to close tomb automatically
timer=6h

###############
## FUNCTIONS ##
###############

## Usage
########
_usage(){
    cat <<HELP

pass-man v1.1.0
Written by Sandor Semsey, Copyright(C) 2020, License MIT

Usage: vault ACTION [TARGET] [OPTIONS]

ACTION:     open, close, generate, retrieve
TARGET:     Path to password (mandatory for 'retrieve' action)
OPTIONS:    Extra arguments to 'pass'
HELP
    exit 1
}

## Check if tomb is opened
##########################
_check_tomb_open(){
    if tomb list >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

## Open vault
#############
_vault_open(){
    if ! _check_tomb_open; then
        pass open -f --timer="${timer}"

        if ! _check_tomb_open; then
            echo "Failed to open tomb." >&2
            exit 1
        fi
    fi
}

## Close vault
##############
_vault_close(){
    if _check_tomb_open; then
        pass close

        if _check_tomb_open; then
            echo "Failed to close tomb." >&2
            exit 1
        fi
    fi
}

## Generate new password
########################
_vault_generate(){
    _vault_open
    pass generate -f aaa_tmp "${@}"
}

## Get pass from vault
##
## @param    $1  Path to password
## @param    $@  Extra arguments to 'pass'
##########################################
_vault_retrieve(){
    local path="${1?:"Path to password missing"}"
    shift
    _vault_open
    pass "${@}" "${path}"
}

##################
## SCRIPT START ##
##################

# Strict mode
set -euo pipefail
IFS=$'\n\t'

# Parse options
action="${1:-}"
[[ -n "${action}" ]] && shift

# Switch action
case "${action}" in
    open) _vault_open ;;
    close) _vault_close ;;
    generate) _vault_generate "${@}" ;;
    retrieve)
        pass_path="${1:-}"
        if [[ -n "${pass_path}" ]]; then
            shift
        else
            echo "Path to password missing" >&2
            _usage
        fi
        _vault_retrieve "${pass_path}" "${@}"
        ;;
    "") echo "Action missing" >&2 && _usage ;;
    *) echo "Invalid action" >&2 && _usage ;;
esac

exit 0
