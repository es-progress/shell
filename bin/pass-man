#!/usr/bin/env bash
#####################################
## pass-man                        ##
##                                 ##
## Manages a 'pass' password store ##
## which is inside a tomb.         ##
#####################################

############
## CONFIG ##
############
# Timer to close tomb automatically
timer=6h

###############
## FUNCTIONS ##
###############

## Usage
########
_usage() {
    cat <<HELP

pass-man v1.3.3
Written by Sandor Semsey, Copyright (C) 2020, License MIT

Usage: pass-man ACTION [TARGET] [EXTRA]...

Params:
  ACTION             Action to perform (open, close, generate, retrieve)
  TARGET             Path to password in password store (mandatory for 'retrieve' action)
  EXTRA              Extra arguments to 'pass'
HELP
    exit 1
}

## Check if tomb is opened
##########################
_check-tomb-open() {
    local tomb
    tomb=$(basename "${PASSWORD_STORE_TOMB_FILE:-~/.password.tomb}" .tomb)
    tomb list "${tomb}" >/dev/null 2>&1
}

## Open vault
#############
_vault-open() {
    # shellcheck disable=SC2310
    if ! _check-tomb-open; then
        pass open -f --timer="${timer}"

        if ! _check-tomb-open; then
            error-exit "Failed to open tomb."
        fi
    fi
}

## Close vault
##############
_vault-close() {
    # shellcheck disable=SC2310
    if _check-tomb-open; then
        pass close

        if _check-tomb-open; then
            error-exit "Failed to close tomb."
        fi
    fi
}

## Generate new password
########################
_vault-generate() {
    _vault-open
    pass generate -f aaa_tmp "${@}"
}

## Get pass from vault
##
## @param    $1  Path to password
## @param    $@  Extra arguments to 'pass'
##########################################
_vault-retrieve() {
    local path="${1?:Path to password missing}"
    shift
    _vault-open
    pass "${@}" "${path}"
}

##################
## SCRIPT START ##
##################

# Strict mode
set -eufo pipefail
IFS=$'\n\t'

# shellcheck disable=SC1090
source "${ES_SHELL_LOADER}"

# Parse options
action="${1:-}"
[[ -n "${action}" ]] && shift

# Switch action
case "${action}" in
    open) _vault-open ;;
    close) _vault-close ;;
    generate) _vault-generate "${@}" ;;
    retrieve)
        pass_path="${1:-}"
        if [[ -n "${pass_path}" ]]; then
            shift
        else
            print-error Path to password missing
            _usage
        fi
        _vault-retrieve "${pass_path}" "${@}"
        ;;
    "") print-error Action missing && _usage ;;
    *) print-error Invalid action && _usage ;;
esac

exit 0
