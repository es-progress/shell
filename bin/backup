#!/usr/bin/env bash
###############################################
## backup                                    ##
##                                           ##
## A wrapper for `rsync`.                    ##
## Modes:                                    ##
##   A) archive                              ##
##      1. Backup (rsync)                    ##
##      2. Archive (tar & gzip)              ##
##      3. Delete old archives (find)        ##
##   B) quick (rsync)                        ##
##   C) snapshot (rsync snapshot style)      ##
###############################################

###############
## FUNCTIONS ##
###############

## Version
##########
_version() {
    cat <<VERSION
backup v2.5.0
Written by Sandor Semsey, Copyright (C) 2020, License MIT
VERSION
}

## Usage
########
_usage() {
    cat <<HELP

Usage: backup REQUIRED_OPTIONS... [OPTIONS]...

Backs up a source directory to a different filesystem
This is basically a wrapper for rsync

OPTIONS

REQUIRED
  -s, --source [DIR]         Source DIRECTORY to backup
  -d, --destination [DIR]    Destination DIRECTORY to put backup on
                             target filesystem (relative to mounting point)
  -f, --filesystem [FS]      Target FILESYSTEM to backup to (eg. /dev/sda3)
  -m, --mount [DIR]          Mounting point for given filesystem

OPTIONAL
  -a, --archive [DIR]        Put archives in DIR, defaults to 'archive'
      --expire [NUM]         Deletes archives older than NUM days (NUM*24 hours)
      --format [FORMAT]      Appends current date to archive filename
                             Supported FORMATS:
                                 24H (HH:MM:SS eg. 17:26:14)
                                 YMD (YYYY-mm-dd eg. 2020-02-19)       <--default
                                 FULL (YYYY-mm-dd_HH:MM:SS)
      --mode [MODE]          Select MODE:
                                 ARCHIVE:  backup and create archives  <--default
                                 SNAPSHOT: snapshot backup
                                 QUICK:    backup only
      --exclude [PATTERN]    Exclude files matching PATTERN
      --prefix [STRING]      Optional prefix on archive files
  -q, --quiet                Suppress non-error messages
      --debug                Print commands as executed
  -h, --help                 Display this help
  -v, --version              Print version info
HELP
}

##################
## SCRIPT START ##
##################

# Strict mode
set -eufo pipefail
IFS=$'\n\t'

# shellcheck disable=SC1090
source "${ES_SHELL_LOADER}"

# Parse options
###############
date_format=%F
backup_mode=archive
archive_dir=archive
exclusion=()
expire_date=
archive_prefix=
quiet=()

while :; do
    case "${1:-}" in
        -s | --source)
            shift
            source_dir="${1}"
            ;;
        -d | --destination)
            shift
            # Remove trailing slash
            dest_dir="${1%/}"
            ;;
        -f | --filesystem)
            shift
            file_system="${1%/}"
            ;;
        -m | --mount)
            shift
            mount_point="${1%/}"
            ;;
        -a | --archive)
            shift
            archive_dir="${1}"
            ;;
        -x | --exclude)
            shift
            exclusion=("${exclusion[@]}" "--exclude=${1}")
            ;;
        --expire)
            shift
            expire_date="${1}"
            ;;
        -p | --prefix)
            shift
            archive_prefix="${1}"
            ;;
        --mode)
            shift
            case "${1}" in
                QUICK) backup_mode=quick ;;
                SNAPSHOT) backup_mode=snapshot ;;
                ARCHIVE) backup_mode=archive ;;
                *)
                    echo Not supported mode: "${1}"
                    _usage
                    exit 1
                    ;;
            esac
            ;;
        --format)
            shift
            case "${1}" in
                YMD) date_format=%F ;;
                24H) date_format=%T ;;
                FULL) date_format=%F_%T ;;
                *)
                    echo Not supported format: "${1}"
                    _usage
                    exit 1
                    ;;
            esac
            ;;
        -q | --quiet)
            quiet=(--quiet)
            export ES_PRINT_HUSH=1
            ;;
        --debug) set -x ;;
        -h | --help)
            _version
            _usage
            exit 0
            ;;
        -v | --version)
            _version
            exit 0
            ;;
        "") break ;;
        *)
            echo Not supported option: "${1}"
            _usage
            exit 1
            ;;
    esac
    shift
done

check-root

# Check required options
: "${file_system:?Filesystem missing}"
: "${mount_point:?Mounting point missing}"
: "${source_dir:?Source missing}"
: "${dest_dir:?Destination missing}"

print-status Mount "${file_system}" to "${mount_point}"...
if ! findmnt "${mount_point}" >/dev/null; then
    mount "${file_system}" "${mount_point}"
    print-finish
else
    print-finish Already mounted, skip.
fi

now=$(date "+${date_format}")
destination="${mount_point}/${dest_dir}"

print-status Create destination dir "${destination}..."
if [[ ! -e "${destination}" ]]; then
    mkdir -p "${destination}"
    print-finish
else
    print-finish Already created, skip.
fi

# Set rsync targets, options
if [[ "${backup_mode}" == archive || "${backup_mode}" == quick ]]; then
    target="${destination}/actual"
    opt=(--delete --inplace)
else
    target="${destination}/${now}"
    last="${destination}/last"
    opt=("--link-dest=${last}")
fi

print-header Backup files...
rsync -aAXHEh --info=stats1 --info=progress2 "${opt[@]}" "${exclusion[@]}" "${quiet[@]}" "${source_dir}" "${target}"

# Post backup steps
case "${backup_mode}" in
    snapshot)
        print-status Manage links for snapshots...
        # Remove symlink to previous snapshot
        rm -f "${last}"
        # Create new symlink to latest snapshot for the next backup to hardlink
        ln -s "${target}" "${last}"
        print-finish

        if [[ -n "${expire_date}" ]]; then
            print-status Delete expired snapshots...
            find "${destination}" -mindepth 1 -maxdepth 1 -mtime "+${expire_date}" -exec rm -rf {} \;
            print-finish
        fi
        ;;
    archive)
        print-status Create archive dir "${destination}/${archive_dir}..."
        if [[ ! -e "${destination}/${archive_dir}" ]]; then
            mkdir -p "${destination}/${archive_dir}"
            print-finish
        else
            print-finish Already created, skip.
        fi

        print-status Compress files...
        tar -C "${destination}" -I "pigz --fast" --sort=name -cf "${destination}/${archive_dir}/${archive_prefix}${now}.tar.gz" actual/
        print-finish

        if [[ -n "${expire_date}" ]]; then
            print-status Delete expired archives...
            find "${destination}/${archive_dir}" -mindepth 1 -maxdepth 1 -mtime "+${expire_date}" -exec rm -rf {} \;
            print-finish
        fi
        ;;
    *) ;;
esac

print-status Unmounting "${mount_point}..."
if findmnt "${mount_point}" >/dev/null; then
    umount "${mount_point}" || true
    print-finish
else
    print-finish Already unmounted, skip.
fi

print-finish Backup finished

exit 0
