#!/usr/bin/env bash
###############################################
## backup                                    ##
##                                           ##
## A wrapper for `rsync`.                    ##
## Modes:                                    ##
##   A) archive                              ##
##      1. Backup (rsync)                    ##
##      2. Archive (tar & gzip)              ##
##      3. Delete old archives (date-action) ##
##   B) quick (rsync)                        ##
##   C) snapshot (rsync snapshot style)      ##
###############################################

###############
## FUNCTIONS ##
###############

## Version
##########
version(){
    cat <<"VERSION"
Backup v1.2.1
Written by Sandor Semsey, Copyright(C) 2020, License MIT
VERSION
}

## Usage
########
usage(){
    cat <<"HELP"

Usage: backup REQUIRED_OPTIONS... [OPTIONS...]

Backs up a source directory to a different filesystem
This is basically a wrapper for rsync

OPTIONS

REQUIRED
-s, --source [DIR]             source DIRECTORY to backup
-d, --destination [DIR]        destination DIRECTORY to put backup (relative to mounting point)
-f, --filesystem [FILESYSTEM]  target FILESYSTEM to backup to (eg. /dev/sda3)
-m, --mount [DIR]              mounting point for given filesystem

OPTIONAL
-a, --archive [DIR]            put archives in DIR
    --expire [STRING]          deletes archives older than this date (eg. -2days) for STRING see `man date`

    --format [FORMAT]          appends current date to archive filename
                               supported FORMATS:
                               24H (HH:MM:SS eg. 17:26:14)
                               YMD (YYYY-mm-dd eg. 2020-02-19)       <--default
                               FULL (YYYY-mm-dd_HH:MM:SS)

    --mode [MODE]              select MODE:
                               ARCHIVE:  backup and create archives  <--default
                               SNAPSHOT: snapshot backup
                               QUICK:    backup only

    --exclude [PATTERN]        exclude files matching PATTERN
    --prefix [STRING]          optional prefix on archive files

    --debug                    print commands as executed
-h, --help                     display this help
-v, --version                  print version info
HELP
}

##################
## SCRIPT START ##
##################

# Strict mode minus IFS
set -euo pipefail

source "${PATH_SOURCER}"
check-root || exit 1

# Parse options
###############
date_format="%F"
date_action_format="YMD"
backup_mode="archive"
archive_dir="archive"
exclusion=()
expire_date=""
archive_prefix=""

while :; do
    case "${1:-}" in
        -s | --source)
            shift
            source_dir="${1}"
            ;;
        -d | --destination)
            shift
            dest_dir="${1}"
            ;;
        -f | --filesystem)
            shift
            file_system="${1}"
            ;;
        -m | --mount)
            shift
            mount_point="${1}"
            ;;
        -a | --archive)
            shift
            archive_dir="${1}"
            ;;
        -x | --exclude)
            shift
            exclusion=("${exclusion[@]}" "--exclude=${1}")
            ;;
        --expire)
            shift
            expire_date="${1}"
            ;;
        -p | --prefix)
            shift
            archive_prefix="${1}"
            ;;
        --mode)
            shift
            case "${1}" in
                QUICK)
                    backup_mode="quick"
                    ;;
                SNAPSHOT)
                    backup_mode="snapshot"
                    ;;
                ARCHIVE)
                    backup_mode="archive"
                    ;;
            esac
            ;;
        --format)
            shift
            case "${1}" in
                YMD)
                    date_format="%F"
                    date_action_format="YMD"
                    ;;
                24H)
                    date_format="%T"
                    date_action_format="24H"
                    ;;
                FULL)
                    date_format="%F_%T"
                    date_action_format="FULL"
                    ;;
            esac
            ;;
        --debug)
            set -x
            ;;
        -h | --help)
            version
            usage
            exit 0
            ;;
        -v | --version)
            version
            exit 0
            ;;
        "")
            break
            ;;
        *)
            echo "Not supported option: ${1}"
            usage
            exit 1
            ;;
    esac
    shift
done

# Check required options
: "${file_system:?'Filesystem missing'}"
: "${mount_point:?'Mounting point missing'}"
: "${source_dir:?'Source missing'}"
: "${dest_dir:?'Destination missing'}"

# Remove trailing slash
file_system="${file_system%/}"
mount_point="${mount_point%/}"
dest_dir="${dest_dir%/}"

if ! findmnt "${mount_point}" >/dev/null; then
    print-status "Mounting backup filesystem..."
    mount "${file_system}" "${mount_point}"
    print-finish
fi

now=$(date "+${date_format}")
aim="${mount_point}/${dest_dir}"

# Set targets, options
if [[ "${backup_mode}" == "archive" || "$backup_mode" == "quick" ]]; then
    target="${aim}/actual"
    opt=(--delete --inplace)
else
    target="${aim}/${now}"
    last="${aim}/last"
    opt=("--link-dest=${last}")
fi

print-header "Backing up files..."
rsync -aAXHEh --info=stats1 --info=progress2 "${opt[@]}" "${exclusion[@]}" "${source_dir}" "${target}"

# Post backup steps
case "${backup_mode}" in
    "snapshot")
        print-status "Managing links for snapshots..."
        # Remove symlink to previous snapshot
        rm -f "${last}"
        # Create new symlink to latest snapshot for the next backup to hardlink
        ln -s "${target}" "${last}"
        print-finish

        if [[ -n "${expire_date}" ]]; then
            print-status "Deleting expired snapshots..."
            date-action -dr --diff="${expire_date}" --format=${date_action_format} "${aim}"/*
            print-finish
        fi
        ;;
    "archive")
        old_dir=$(pwd)
        cd "${aim}"

        print-status "Compressing files..."
        tar_file="${archive_prefix}${now}.tar.gz"
        tar -I "pigz -1" --sort=name -cf "${archive_dir}/${tar_file}" "actual/"
        print-finish

        print-status "Testing compression..."
        pigz -t "${archive_dir}/${tar_file}"
        print-finish

        if [[ -n "${expire_date}" ]]; then
            print-status "Deleting expired archives..."
            date-action -r --diff="${expire_date}" --format=${date_action_format} "${archive_dir}/*"
            print-finish
        fi

        cd "${old_dir}"
        ;;
esac

# Unmount filesystem
if grep -qs "${mount_point}" /etc/mtab; then
    print-status "Unmounting backup filesystem..."
    umount "${mount_point}"
    print-finish
fi

print-finish "Backup finished"

exit 0
