#!/usr/bin/env bash
###############################################
## ESubuntu                                  ##
##                                           ##
## backup                                    ##
##                                           ##
## A wrapper for `rsync`.                    ##
## Modes:                                    ##
##   A) archive                              ##
##      1. Backup (rsync)                    ##
##      2. Archive (tar & gzip)              ##
##      3. Delete old archives (date-action) ##
##   B) quick (rsync)                        ##
##   C) snapshot (rsync snapshot style)      ##
###############################################

#############
# FUNCTIONS #
#############

# Usage
#######
usage() {
    cat <<HELP

Backup v1.0.0
Written by Sandor Semsey, Copyright(C) 2020, License MIT

Usage: backup REQUIRED_OPTIONS... [OPTIONS...]

Backs up a source directory to a different filesystem
This is basically a wrapper for rsync

OPTIONS

REQUIRED
-s, --source [DIR]             source DIRECTORY to backup
-d, --destination [DIR]        destination DIRECTORY to put backup (relative to mounting point)
-f, --filesystem [FILESYSTEM]  target FILESYSTEM to backup to (eg. /dev/sda3)
-m, --mount [DIR]              mounting point for given filesystem

OPTIONAL
-a, --archive [DIR]            put archives in DIR
    --expire [STRING]          deletes archives older than this date (eg. -2days) for STRING see $(man date)

    --format [FORMAT]          appends current date to archive filename
                               supported FORMATS:
                               24H (HH:MM:SS eg. 17:26:14)
                               YMD (YYYY-mm-dd eg. 2020-02-19)       <--default
                               FULL (YYYY-mm-dd_HH:MM:SS)

    --mode [MODE]              select MODE:
                               ARCHIVE:  backup and create archives  <--default
                               SNAPSHOT: snapshot backup
                               QUICK:    backup only

    --exclude [PATTERN]        exclude files matching PATTERN
    --prefix [STRING]          optional prefix on archive files

    --debug                    print commands as executed
-h, --help                     display this help

HELP
    exit 0
}

# Exclusion builder
# @param    $*  Files to exclude
################################
exc_build() {
    local exclusion=""
    for ex in "$@"; do
        exclusion="${exclusion}--exclude=${ex} "
    done
    echo ${exclusion}
}

################
# SCRIPT START #
################

# Strict mode minus IFS
set -euo pipefail

# Disable shell path expansion
set -f

# Import environment variables
source "${PATH_ENV_VARS}"

# Import library
source "${PATH_SOURCER}"

# Check if run as root
check-root || exit 1

# Parse options
###############
DATE_FORMAT="%F"
DATE_ACTION_FORMAT="YMD"
MODE="archive"
ARCHIVE="archive"
EXCL=""
EXPIRE=""
PREFIX=""

while :; do
    case "${1:-}" in
        -s | --source)
            shift
            SOURCE="${1}"
            ;;
        -d | --destination)
            shift
            DEST="${1}"
            ;;
        -f | --filesystem)
            shift
            FS="${1}"
            ;;
        -m | --mount)
            shift
            MOUNT="${1}"
            ;;
        -a | --archive)
            shift
            ARCHIVE="${1}"
            ;;
        -x | --exclude)
            shift
            EXCL="${1}"
            ;;
        --expire)
            shift
            EXPIRE="${1}"
            ;;
        -p | --prefix)
            shift
            PREFIX="${1}"
            ;;
        --mode)
            shift
            case "${1}" in
                QUICK)
                    MODE="quick"
                    ;;
                SNAPSHOT)
                    MODE="snapshot"
                    ;;
                ARCHIVE)
                    MODE="archive"
                    ;;
            esac
            ;;
        --format)
            shift
            case "${1}" in
                YMD)
                    DATE_FORMAT="%F"
                    DATE_ACTION_FORMAT="YMD"
                    ;;
                24H)
                    DATE_FORMAT="%T"
                    DATE_ACTION_FORMAT="24H"
                    ;;
                FULL)
                    DATE_FORMAT="%F_%T"
                    DATE_ACTION_FORMAT="FULL"
                    ;;
            esac
            ;;
        --debug)
            set -x
            ;;
        -h | --help)
            usage
            ;;
        *)
            break
            ;;
    esac
    shift
done

# Validate options
##################

# Check required
: "${FS:?'Filesystem missing'}"
: "${MOUNT:?'Mounting point missing'}"
: "${SOURCE:?'Source missing'}"
: "${DEST:?'Destination missing'}"

# Remove trailing slash
FS="${FS%/}"
MOUNT="${MOUNT%/}"
DEST="${DEST%/}"

# Prepare
#########

# Mount filesystem
if ! grep -qs "${MOUNT}" /proc/mounts; then
    mount "${FS}" "${MOUNT}"
fi

# Init backup
exclude=$(exc_build ${EXCL})
now=$(date "+${DATE_FORMAT}")
aim="${MOUNT}/${DEST}"

# Set targets, options
if [[ "${MODE}" == "archive" ]] || [[ "$MODE" == "quick" ]]; then
    target="${aim}/actual"
    opt="--delete --inplace"
else
    target="${aim}/${now}"
    last="${aim}/last"
    opt="--link-dest=${last}"
fi

# Backup
########
rsync -aAXHEh --info=stats1 --info=progress2 ${opt} ${exclude} "${SOURCE}" "${target}"

# Post backup steps
###################

# Manage links for snapshot
if [[ "${MODE}" == "snapshot" ]]; then
    # Remove symlink to previous snapshot
    rm -f "${last}"

    # Create new symlink to latest snapshot for the next backup to hardlink
    ln -s "${target}" "${last}"

    # Delete expired archives
    if [[ -n "${EXPIRE}" ]]; then
        date-action -dr --diff="${EXPIRE}" --format=${DATE_ACTION_FORMAT} ${aim}/*
    fi
fi

# Create archives
if [[ "${MODE}" == "archive" ]]; then
    # Go to backup dir
    cd "${aim}"

    # Archive
    tar_file="${PREFIX}${now}.tar.gz"
    tar -I "pigz -1" --sort=name -cf "${ARCHIVE}/${tar_file}" "actual/"

    # Test compression
    pigz -t "${ARCHIVE}/${tar_file}"

    # Delete expired archives
    if [[ -n "${EXPIRE}" ]]; then
        date-action -r --diff="${EXPIRE}" --format=${DATE_ACTION_FORMAT} "${ARCHIVE}/*"
    fi

    # Leave backup filesystem
    cd
fi

# Unmount filesystem
umount "${MOUNT}/" || exit 0

exit 0
